package mainimport (	"fmt"	"github.com/PuerkitoBio/goquery"	"log"	"net"	"net/http"	"os/exec"	"regexp"	"runtime"	"strings"	"time")func ValidateInput(network string, address string) error { //检验用户输入	switch network {	case "tcp", "tcp4", "tcp6", "udp", "udp4", "udp6":	default:		return fmt.Errorf("invalid network type: %s", network)	}	_, _, err := net.SplitHostPort(address) //分析地址是否正确	if err != nil {		return fmt.Errorf("invalid address: %s\nThis is error: %v", address, err)	}	return nil}func IsHostAlive(ip string) bool { //主机存活检测，用系统 ping 的方式，可以根据不同系统用不同的 ping 命令	var cmd *exec.Cmd	switch runtime.GOOS {	case "windows":		cmd = exec.Command("ping", "-n", "2", "-w", "2000", ip)	default: // Linux/macOS		cmd = exec.Command("ping", "-c", "2", "-W", "2", ip)	}	output, err := cmd.CombinedOutput()	if err != nil {		log.Printf("ping %s failed: %v \noutput: %s", ip, err, string(output))		return false	}	return true}func IsHostAlive_TCP(ip string) bool { //主机存活检测，通过 TCP 连接的方法，可以跨系统运用，同时在对应主机禁止 ICMP 的时候使用	port := []int{80, 22, 443}	for _, port := range port {		conn, err := net.DialTimeout("tcp", fmt.Sprintf("%s:%d", ip, port), 3*time.Second)		if err == nil {			conn.Close()			return true		}	}	return false}func getTimeout(port int) time.Duration {	switch port {	case 21, 22, 80, 443:		return 500 * time.Millisecond	case 3306, 3389:		return 1 * time.Second	default:		return 2 * time.Second	}}func FirstLine(s string) string { //辅助函数：提取第一行	if idx := strings.Index(s, "\r\n"); idx > 0 {		return s[:idx]	}	return s}func ExtractHeader(banner, headerName string) string { //辅助函数：从 HTTP 响应头提取特定字段	re := regexp.MustCompile(fmt.Sprintf(`(?i)%s:\s*(.*?)\r\n`, headerName))	match := re.FindStringSubmatch(banner)	if len(match) > 1 {		return strings.TrimSpace(match[1])	}	return ""}func ErrType(scan scanResult) string { //产生错误的类型	if netErr, ok := scan.err.(net.Error); ok && netErr.Timeout() {		return "Timeout" //fmt.Printf("[-] %s - Timeout\n", scan.address)	} else if opErr, ok := scan.err.(*net.OpError); ok {		if opErr.Op == "dial" {			return "refused"		} else {			return "op_error" //fmt.Printf("[-] %s - Error: %v\n", scan.address, scan.err)		}	} else {		return "other" //fmt.Printf("[-] %s - Error: %v", scan.address, scan.err)	}}// GetWebsiteTitle 获取网站标题func GetWebsiteTitle(ip string, port int) string { //用于子域名收集功能，提取网站的标题	url := fmt.Sprintf("http://%s:%d", ip, port)	client := &http.Client{Timeout: 3 * time.Second}	resp, err := client.Get(url)	if err != nil {		return ""	}	defer resp.Body.Close()	// 提取<title>标签内容	doc, err := goquery.NewDocumentFromReader(resp.Body)	if err != nil {		return ""	}	return doc.Find("title").Text()}