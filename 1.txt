package main

import (
	"fmt"
	"os/exec"
	"strings"

	//"github.com/go-ping/ping"
	"log"
	"net"
	"runtime"
	"strconv"
	"sync"
	"time"
)

type scanner struct {
	network string
	ip      string
	port    int
	conn    net.Conn
}

type scanResult struct {
	address string
	err     error
	errtype string
	open    bool
	service string //指纹识别部分
	banner  string
}

func validateInput(network string, address string) error { //检验用户输入
	switch network {
	case "tcp", "tcp4", "tcp6", "udp", "udp4", "udp6":
	default:
		return fmt.Errorf("invalid network type: %s", network)
	}
	_, _, err := net.SplitHostPort(address) //分析地址是否正确
	if err != nil {
		return fmt.Errorf("invalid address: %s\nThis is error: %v", address, err)
	}
	return nil
}

//func ishostAlive(ip string, count int, timeout time.Duration) bool { //检验主机是否存活，用的是 go-ping 库
//	pinger, err := ping.NewPinger(ip)
//	if err != nil {
//		log.Printf("Error creating pinger: %v", err)
//		return false
//	}
//
//	pinger.SetPrivileged(true)
//	pinger.Count = count
//	pinger.Timeout = timeout
//
//	if err := pinger.Run(); err != nil {
//		log.Printf("Ping failed: %v", err)
//		return false
//	}
//	stats := pinger.Statistics()
//	return stats.PacketsRecv > 0
//}

func isHostAlive(ip string) bool { //主机存活检测，用系统 ping 的方式，可以根据不同系统用不同的 ping 命令
	var cmd *exec.Cmd
	switch runtime.GOOS {
	case "windows":
		cmd = exec.Command("ping", "-n", "2", "-w", "2000", ip)
	default: // Linux/macOS
		cmd = exec.Command("ping", "-c", "2", "-W", "2", ip)
	}
	output, err := cmd.CombinedOutput()
	if err != nil {
		log.Printf("ping %s failed: %v \noutput: %s", ip, err, string(output))
		return false
	}
	return true
}

func isHostAlive_TCP(ip string) bool { //主机存活检测，通过 TCP 连接的方法，可以跨系统运用，同时在对应主机禁止 ICMP 的时候使用
	port := []int{80, 22, 443}
	for _, port := range port {
		conn, err := net.DialTimeout("tcp", fmt.Sprintf("%s:%d", ip, port), 3*time.Second)
		if err == nil {
			conn.Close()
			return true
		}
	}
	return false
}

func errType(scan scanResult) string { //产生错误的类型
	if netErr, ok := scan.err.(net.Error); ok && netErr.Timeout() {
		return "Timeout" //fmt.Printf("[-] %s - Timeout\n", scan.address)
	} else if opErr, ok := scan.err.(*net.OpError); ok {
		if opErr.Op == "dial" {
			return "refused"
		} else {
			return "op_error" //fmt.Printf("[-] %s - Error: %v\n", scan.address, scan.err)
		}
	} else {
		return "other" //fmt.Printf("[-] %s - Error: %v", scan.address, scan.err)
	}
}

func readBanner(conn net.Conn) string {
	//timeout := time.Second

	conn.SetReadDeadline(time.Now().Add(2 * time.Second))
	buf := make([]byte, 1024)

	n, err := conn.Read(buf)
	if err != nil {
		log.Printf("read banner failed: %v", err)
	}
	if n > 0 {
		return strings.TrimSpace(string(buf[:n]))
	}

	//如果没有收到Banner，发送通用探测包
	switch conn.RemoteAddr().(*net.TCPAddr).Port {
	case 21: // FTP
		conn.Write([]byte("USER anonymous\r\n"))
	case 22: // SSH
		conn.Write([]byte("SSH-2.0-GoScan\r\n"))
	case 80, 443, 8080, 888, 81: // HTTP/S
		conn.Write([]byte("GET / HTTP/1.0\r\n\r\n"))
	default: // 其他端口保持原样
		conn.Write([]byte("\x01\x02\x03\x04\n")) //魔法数字探测包
	}
	n, _ = conn.Read(buf)
	return strings.TrimSpace(string(buf[:n]))
}

func identifyService(conn net.Conn, port int) string { //指纹识别函数
	banner := readBanner(conn)

	switch {
	case strings.HasPrefix(banner, "SSH-"):
		return "ssh"
	case strings.HasPrefix(banner, "220") && port == 21:
		return "ftp"
	case strings.Contains(banner, "HTTP"):
		return "http"
	case strings.Contains(banner, "<html>"):
		return "http"
	default:
		// 端口猜测（保底逻辑）
		switch port {
		case 22:
			return "ssh(疑似)"
		case 80, 443, 8080, 888:
			return "http(疑似)"
		case 3306:
			return "mysql(疑似)"
		default:
			return "unknown"
		}
	}
}

//func probeProtocol(conn net.Conn, port int) string {
//	switch port {
//	case 22: // SSH
//		conn.Write([]byte("SSH-2.0-GoScanner\r\n"))
//		return readBanner(conn)
//	case 80: // HTTP
//		conn.Write([]byte("GET / HTTP/1.0\r\n\r\n"))
//		return readBanner(conn)
//	case 443:
//		conn.Write([]byte("\\x16\\x03\\x01\\x00\\x75"))
//		return readBanner(conn)
//	}
//	return ""
//}

func getTimeout(port int) time.Duration {
	switch port {
	case 21, 22, 80, 443:
		return 500 * time.Millisecond
	case 3306, 3389:
		return 1 * time.Second
	default:
		return 2 * time.Second
	}
}

func scanWorker(id int, ip string, scanner <-chan scanner, results chan<- scanResult, timeout time.Duration) { //需要进行的任务，这里是进行端口扫描
	for scan := range scanner { //这里的 scanner 是通道，里面是有很多的 scan 个体，这里的 scan 才是一个结构体可以引用 scan 结构体的元素
		result := scanResult{}                                              //这里是定义一个 scanResult 的结构体
		result.address = net.JoinHostPort(ip, strconv.Itoa(scan.port))      //这里是用 ip 和端口一起组成地址
		if err := validateInput(scan.network, result.address); err != nil { //用 validateInput 检验地址和网络方式是否正确
			log.Println(err)
			break
		}
		scan.conn, result.err = net.DialTimeout(scan.network, result.address, timeout) //进行连接
		if result.err == nil {                                                         //连接成功
			result.open = true //open 赋值为 true
			result.banner = readBanner(scan.conn)
			result.service = identifyService(scan.conn, scan.port)
			scan.conn.Close() //连接关闭
		} else {
			result.open = false
			result.errtype = errType(result)
		}
		results <- result
	}
}

func run(ip string, network string) {
	var (
		totalPorts = 65535      // 总端口数
		scanned    = 0          // 已扫描计数
		startTime  = time.Now() // 记录开始时间
	)
	var wg sync.WaitGroup
	tasks := make(chan scanner, 1000)
	results := make(chan scanResult, 1000)
	var openPorts []scanResult
	workers := runtime.NumCPU() * 100

	for i := 0; i < workers; i++ {
		wg.Add(1)
		go func(id int) {
			defer wg.Done()
			scanWorker(id, ip, tasks, results, 2*time.Second)
		}(i)
	}

	go func() {
		for i := 1; i < 65536; i++ {
			tasks <- scanner{network: network, ip: ip, port: i, conn: nil}
		}
		close(tasks)
	}()

	go func() {
		wg.Wait()
		close(results)
	}()
	errCount := make(map[string]int)
	for result := range results {
		scanned++
		if scanned%100 == 0 || scanned == totalPorts {
			printProgress(scanned, totalPorts, startTime)
		}
		if result.open {
			//fmt.Printf("[+] %s is open\n", result.address)
			openPorts = append(openPorts, result)
		} else {
			if errCount[result.errtype] < 3 {
				fmt.Printf("[-] %s is %s\n", result.address, result.errtype)
			}
			errCount[result.errtype]++

		}
	}
	fmt.Println()
	printOpenPorts(openPorts)
}

func printProgress(current, total int, start time.Time) {
	percent := float64(current) / float64(total) * 100
	elapsed := time.Since(start).Round(time.Second)

	// \r 让光标回到行首，实现原地刷新
	fmt.Printf("\rScanning: %d/%d (%.1f%%) | Elapsed: %v",
		current, total, percent, elapsed)
}

func printOpenPorts(results []scanResult) {
	fmt.Println("\n=== 开放端口详情 ===")
	fmt.Printf("%-20s\t%-15s\t%-30s\n", "地址", "服务类型", "Banner信息")
	for _, r := range results {
		banner := r.banner
		if banner == "" {
			banner = "[无Banner响应]"
		} else if len(banner) > 50 {
			banner = banner[:50] + "..."
		}

		fmt.Printf("%-20s\t%-15s\t%-30s\n",
			r.address,
			r.service,
			banner)
	}
}

func main() {
	var scan scanner
	//var timeout time.Duration
	//var count int     //这两个是 go-ping 那个主机检测版本要用的变量

	//fmt.Print("Please enter your network:")
	//fmt.Scan(&scan.network)
	scan.network = "tcp"
	fmt.Print("Please enter your ip:")
	fmt.Scan(&scan.ip)
	//fmt.Print("IsHostAlive count and time:")
	//fmt.Scan(&count, &timeout)

	if isHostAlive(scan.ip) {
		run(scan.ip, scan.network)
	} else {
		fmt.Println("Can't ping")
		if isHostAlive_TCP(scan.ip) {
			run(scan.ip, scan.network)
		} else {
			fmt.Printf("%s is not alive\n", scan.ip)
		}
	}
}
